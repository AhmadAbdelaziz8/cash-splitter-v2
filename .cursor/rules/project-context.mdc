---
description: 
globs: 
alwaysApply: true
---
## Project: Cash-Splitter - Development Plan

**Objective:** Develop a mobile application (Cash-Splitter) that allows users to photograph a receipt, parse it using an LLM, and generate a shareable link to a static webpage where participants can select their items and see their individual totals.

**Core Philosophy:** Client-side heavy, leveraging LLM for parsing and URL parameters for data transfer to a static site. No server-side application logic or database.

---

**1. High-Level Architecture & Data Flow:**

```
+-----------------------+     +---------------------+     +-----------------------+
|   React Native App    | --> | External LLM API    | --> |   React Native App    |
| (User takes picture)  |     | (e.g., ,      |     | (Receives JSON,      |
|                       |     | Gemini, Claude)     |     |  Generates Link)      |
+-----------------------+     +---------------------+     +-----------------------+
          |
          | (User shares link)
          V
+-------------------------------------------------------------------+
| Static Webpage (e.g., on GitHub Pages, Netlify, Vercel)           |
| (Loads from URL, participants select items, JS calculates totals) |
+-------------------------------------------------------------------+
```

---

**2. Tech Stack:**

*   **Mobile Application:** React Native
    *   **Language:** TypeScript
    *   **State Management:** React Context API
    *   **Navigation:** React Navigation
    *   **Camera:** ``expo-camera` 
    *   **Image Handling:** `react-native-image-picker` (for gallery access if needed), potentially image manipulation libraries for resizing/compression before sending to LLM.
    *   **Sharing:** React Native `Share` API.
*   **LLM Interaction:** Standard `fetch` API to communicate with a chosen LLM provider's API.
*   **Static Webpage:**
    *   **Structure:** HTML
    *   **Styling:** CSS (Plain CSS, Tailwind, or a micro-framework)
    *   **Logic:** Vanilla JavaScript (for parsing URL data, rendering items, and calculating totals)
*   **Hosting for Static Webpage:** GitHub Pages, Netlify, Vercel (free tiers are perfect).

---

**3. Detailed Feature Breakdown & Development Plan:**

**Phase 1: Mobile Application - Core Functionality**

    **Module 1.1: User Interface (UI) & Basic Navigation**
        *   **Screens:**
            *   `HomeScreen`: Button to "Scan Receipt". Maybe a list of recently generated links (stored in AsyncStorage).
            *   `CameraScreen`: Interface to capture the receipt image.
            *   `PreviewScreen`: Shows the captured image, options to retake or proceed.
            *   `ProcessingScreen`: Loading indicator while LLM processes.
            *   `ResultScreen`: Displays parsed items (for verification, optional) and the generated shareable link.
        *   **Components:**
            *   `CameraButton`
            *   `ImagePreview`
            *   `LoadingSpinner`
            *   `ItemList` (optional, for app-side verification)
            *   `ShareLinkButton`
        *   **Tools:** React Navigation for screen transitions.

    **Module 1.2: Camera Integration**
        *   Implement camera functionality using `react-native-camera` or `expo-camera`.
        *   Request necessary permissions (Camera, possibly Storage).
        *   Handle image capture and provide the image data (e.g., base64 string or URI) for further processing.

    **Module 1.3: LLM Integration & Receipt Parsing**
        *   **LLM Choice:** Select an LLM provider (e.g., OpenAI's GPT-4 Vision, Google Gemini, Claude). Consider API costs, accuracy for OCR and structured data extraction from images.
        *   **API Key Management:**
            *   *Initial Development:* Hardcode (NOT FOR PRODUCTION).
            *   *Better (but still client-side risk):* Store in a `.env` file, obfuscate.
            *   *Ideal (violates "no backend" but for reference):* A simple proxy backend to hide the key.
            *   *Compromise for "no backend":* User provides their own API key in app settings (more complex UX but secure). Or use a very rate-limited/free tier if available. *For this plan, we'll assume a key is available to the app client-side, acknowledging the risk.*
        *   **Prompt Engineering:** Craft a prompt for the LLM to:
            *   Perform OCR on the image.
            *   Identify line items and their corresponding prices.
            *   Structure the output as a JSON array, e.g., `[{"item": "Burger", "price": 10.99}, {"item": "Fries", "price": 3.50}]`.
            *   Consider asking for total, tax, tip as separate fields if desired, though the core is itemization.
        *   **API Call:**
            *   Send the image (likely base64 encoded) to the LLM API.
            *   Handle API responses (success, errors, rate limits).
            *   Parse the JSON response.

    **Module 1.4: State Management (Context API)**
        *   **`ReceiptContext`:**
            *   `State`:
                *   `imageUri: string | null`
                *   `parsedItems: Array<{ item: string, price: number }> | null`
                *   `isLoading: boolean`
                *   `error: string | null`
                *   `shareableLink: string | null`
            *   `Actions/Reducers`:
                *   `setImageUri(uri)`
                *   `setParsedItems(items)`
                *   `setLoading(status)`
                *   `setError(message)`
                *   `generateShareableLink(items)`
                *   `clearState()`
        *   **`AppProvider`:** Wrap the root of the application with the context provider.
        *   **`useReceipt` Hook:** Custom hook to easily access context state and dispatch actions.

    **Module 1.5: Link Generation & Sharing**
        *   **Data Encoding:**
            *   The `parsedItems` JSON array needs to be stringified (`JSON.stringify()`).
            *   This string then needs to be URL-encoded (`encodeURIComponent()`).
            *   If the resulting string is very long, consider Base64 encoding or even client-side compression (e.g., using `pako.js` for zlib compression then Base64) before URL encoding to stay within URL length limits (though for typical receipts, direct URL encoding might be fine).
        *   **Link Structure:** `https://<your-static-site-domain>/splitter.html#data=<URL_ENCODED_AND_POSSIBLY_COMPRESSED_JSON_STRING>`
            *   Example: `https://yourusername.github.io/cash-splitter-page/index.html#data=%5B%7B%22item%22%3A%22Burger%22%2C%22price%22%3A10.99%7D%2C%7B%22item%22%3A%22Fries%22%2C%22price%22%3A3.50%7D%5D`
        *   **Sharing:** Use React Native's `Share.share()` API to allow users to send the link via messaging apps, email, etc.

**Phase 2: Static Webpage Development**

    **Module 2.1: HTML Structure (`index.html` or `splitter.html`)**
        *   Basic HTML5 boilerplate.
        *   A container to display the list of items.
        *   A section to display the calculated total for the current user.
        *   Include `<script src="script.js"></script>` and `<link rel="stylesheet" href="style.css">`.

    **Module 2.2: JavaScript Logic (`script.js`)**
        *   **On Page Load:**
            *   Get the data string from the URL fragment: `window.location.hash.substring(1)`. (e.g., `data=...`)
            *   Extract the actual data part after `data=`.
            *   URL-decode the string (`decodeURIComponent()`).
            *   If compression/Base64 was used, reverse that process.
            *   Parse the JSON string into an array of objects (`JSON.parse()`).
        *   **Render Items:**
            *   Dynamically create HTML elements (e.g., `<li>`) for each item.
            *   Each item should display its name and price.
            *   Add a checkbox next to each item (`<input type="checkbox">`).
        *   **Event Handling:**
            *   Attach event listeners to all checkboxes.
            *   On checkbox change, recalculate the total for items selected by *this* user.
        *   **Calculate Total:**
            *   Iterate through all checkboxes.
            *   If a checkbox is checked, add its corresponding item's price to a running total.
            *   Display the updated total on the page.
        *   **No Shared State:** Each participant opening the link gets their own instance of the page and calculates their total independently based on their selections. There's no synchronization between different users viewing the same link.

    **Module 2.3: Styling (`style.css`)**
        *   Basic styling for readability and usability.
        *   Make it mobile-responsive as it will be opened on mobile browsers.

**Phase 3: Deployment**

    **Module 3.1: Static Webpage Hosting**
        *   Create a repository on GitHub.
        *   Push `index.html`, `script.js`, `style.css` to the repository.
        *   Enable GitHub Pages for that repository.
        *   Alternatively, use Netlify or Vercel by connecting your Git repository. Note the public URL.

    **Module 3.2: Mobile App Distribution**
        *   Build release versions of the React Native app for Android (.apk or .aab) and iOS (.ipa).
        *   Distribute via app stores (Google Play Store, Apple App Store) or ad-hoc methods for testing (e.g., TestFlight, Firebase App Distribution).

---

**4. Key Considerations & Challenges:**

*   **LLM Accuracy & Cost:**
    *   Receipt formats vary wildly. The LLM might not always parse correctly. Consider allowing manual correction in the app *before* link generation (adds complexity).
    *   LLM APIs have costs. Monitor usage.
*   **URL Length Limits:** Browsers have URL length limits (around 2000 characters is a safe bet, but varies). Very long receipts with many items could exceed this. Compression of the JSON data before URL encoding is a good mitigation strategy.
*   **LLM API Key Security:** As mentioned, client-side API keys are inherently insecure. For a production app with significant usage, a backend proxy is the standard solution. Given the "no backend" constraint, this is a trade-off.
*   **User Experience (UX) on Static Page:**
    *   The page should be simple and intuitive.
    *   Clear indication of what items are selected and the resulting personal total.
*   **Error Handling:**
    *   **Mobile App:** Network errors, LLM API errors, image processing errors.
    *   **Static Page:** Errors in parsing URL data (e.g., malformed link).
*   **No Shared State for Split:** The static page calculates *an individual's share*. It doesn't track what others have selected or manage the overall bill splitting beyond providing the itemized list. The "settlement" happens offline based on what everyone reports.

---

**5. Future Enhancements (If "No Backend" constraint is relaxed or for V2):**

*   **Backend:** Would allow storing receipts, user accounts, real-time synchronization of item selection, pre-calculated totals.
*   **Manual Correction:** Allow users to edit/add/delete items parsed by the LLM in the mobile app.
*   **Currency Handling:** Support for different currencies.
*   **Tax/Tip Splitting:** More sophisticated logic for splitting shared costs like tax and tip.
*   **Participant Naming:** Allow adding names to selections on the static page (would require a backend or more complex P2P WebRTC logic).
*   **Offline Support (Mobile App):** Save captured receipts locally if LLM processing fails due to network issues.


---